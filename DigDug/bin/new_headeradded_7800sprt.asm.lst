------- FILE new_headeradded_7800sprt.asm LEVEL 1 PASS 2
      1  10000 ????						; Atari 7800 sprite sample
      2  10000 ????						; Written by Daniel Boris (dboris@home.com)
      3  10000 ????						;
      4  10000 ????						; Assemble with DASM
      5  10000 ????						; .a78 style header (needed so a7800 can run it) added by Aaron Lanterman
      6  10000 ????						;
      7  10000 ????
      8  10000 ????				       processor	6502
      9  10000 ????
     10  10000 ????						; ************ Hardware Adresses ***************************
     11  10000 ????
     12  10000 ????		00 01	    INPTCTRL   equ	$01	;Input control
     13  10000 ????		00 15	    AUDC0      equ	$15	;Audio Control Channel 0
     14  10000 ????		00 16	    AUDC1      equ	$16	;Audio Control Channel 1
     15  10000 ????		00 17	    AUDF0      equ	$17	;Audio Frequency Channel 0
     16  10000 ????		00 18	    AUDF1      equ	$18	;Audio Frequency Channel 1
     17  10000 ????		00 19	    AUDV0      equ	$19	;Audio Volume Channel 0
     18  10000 ????		00 1a	    AUDV1      equ	$1A	;Audio Volume Channel 1
     19  10000 ????		00 08	    INPT0      equ	$08	;Paddle Control Input 0
     20  10000 ????		00 09	    INPT1      equ	$09	;Paddle Control Input 1
     21  10000 ????		00 0a	    INPT2      equ	$0A	;Paddle Control Input 2
     22  10000 ????		00 0b	    INPT3      equ	$0B	;Paddle Control Input 3
     23  10000 ????		00 0c	    INPT4      equ	$0C	;Player 0 Fire Button Input
     24  10000 ????		00 0d	    INPT5      equ	$0D	;Player 1 Fire Button Input
     25  10000 ????
     26  10000 ????		00 20	    BACKGRND   equ	$20	;Background Color
     27  10000 ????		00 21	    P0C1       equ	$21	;Palette 0 - Color 1
     28  10000 ????		00 22	    P0C2       equ	$22	;Palette 0 - Color 2
     29  10000 ????		00 23	    P0C3       equ	$23	;Palette 0 - Color 3
     30  10000 ????		00 20	    WSYNC      equ	$20	;Wait For Sync
     31  10000 ????		00 21	    P1C1       equ	$21	;Palette 1 - Color 1
     32  10000 ????		00 22	    P1C2       equ	$22	;Palette 1 - Color 2
     33  10000 ????		00 23	    P1C3       equ	$23	;Palette 1 - Color 3
     34  10000 ????		00 28	    MSTAT      equ	$28	;Maria Status
     35  10000 ????		00 29	    P2C1       equ	$29	;Palette 2 - Color 1
     36  10000 ????		00 2a	    P2C2       equ	$2A	;Palette 2 - Color 2
     37  10000 ????		00 2b	    P2C3       equ	$2B	;Palette 2 - Color 3
     38  10000 ????		00 2c	    DPPH       equ	$2C	;Display List List Pointer High
     39  10000 ????		00 2d	    P3C1       equ	$2D	;Palette 3 - Color 1
     40  10000 ????		00 2e	    P3C2       equ	$2E	;Palette 3 - Color 2
     41  10000 ????		00 2f	    P3C3       equ	$2F	;Palette 3 - Color 3
     42  10000 ????		00 30	    DPPL       equ	$30	;Display List List Pointer Low
     43  10000 ????		00 31	    P4C1       equ	$31	;Palette 4 - Color 1
     44  10000 ????		00 32	    P4C2       equ	$32	;Palette 4 - Color 2
     45  10000 ????		00 33	    P4C3       equ	$33	;Palette 4 - Color 3
     46  10000 ????		00 34	    CHARBASE   equ	$34	;Character Base Address
     47  10000 ????		00 35	    P5C1       equ	$35	;Palette 5 - Color 1
     48  10000 ????		00 36	    P5C2       equ	$36	;Palette 5 - Color 2
     49  10000 ????		00 37	    P5C3       equ	$37	;Palette 5 - Color 3
     50  10000 ????		00 38	    OFFSET     equ	$38	;Unused - Store zero here
     51  10000 ????		00 39	    P6C1       equ	$39	;Palette 6 - Color 1
     52  10000 ????		00 3a	    P6C2       equ	$3A	;Palette 6 - Color 2
     53  10000 ????		00 3b	    P6C3       equ	$3B	;Palette 6 - Color 3
     54  10000 ????		00 3c	    CTRL       equ	$3C	;Maria Control Register
     55  10000 ????		00 3d	    P7C1       equ	$3D	;Palette 7 - Color 1
     56  10000 ????		00 3e	    P7C2       equ	$3E	;Palette 7 - Color 2
     57  10000 ????		00 3f	    P7C3       equ	$3F	;Palette 7 - Color 3
     58  10000 ????
     59  10000 ????		02 80	    SWCHA      equ	$280	;P0, P1 Joystick Directional Input
     60  10000 ????		02 82	    SWCHB      equ	$282	;Console Switches
     61  10000 ????		02 81	    CTLSWA     equ	$281	;I/O Control for SCHWA
     62  10000 ????		02 83	    CTLSWB     equ	$283	;I/O Control for SCHWB
     63  10000 ????
     64 U0051 ????				      SEG.U	data
     65 U0051 ????
     66 U0051 ????
     67 U0051 ????						;******* Vairables ********************************
     68 U0051 ????
     69 U0040					      org	$40
     70 U0040
     71 U0040		       00	   xpos       ds.b	1	;X Position of sprite
     72 U0041		       00	   ypos       ds.b	1	;Y Position of sprite
     73 U0042		       00	   temp       ds.b	1
     74 U0043		       00 00	   dlpnt      ds.w	1
     75 U0045		       00 00 00 00*dlend      ds.b	12	;Index of end of each DL
     76 U0051
     77 U0051
     78 U0051
     79 U0051
     80 U0051							;**********************************************************
     81 U0051							; Aaron Lanterman (1/30/2020) replaced this original line:
     82 U0051							; SEG code
     83 U0051							; With this big chunk of header code for the simulator:
     84 U0051							;**********************************************************
     85  10000 ????				       SEG	ROM
     86  7000				   HEADER     ORG	$7000
     87  7000		       01		      DC.B	1	; 0   Header version	  - 1 byte
     88  7001		       41 54 41 52*	      DC.B	"ATARI7800"	; 1..16  "ATARI7800   "  - 16 bytes
     89  700a		       20 20 20 20*	      DS	7,32
     90  7011		       59 6f 75 72*	      DC.B	"Your Name Here"	; 17..48 Cart title	  - 32 bytes
     91  701f		       00 00 00 00*	      DS	HEADER+49-.,0
     92  7031							; Hack of changing the 256->code line to the $00,$00,$80,$00 code line
     93  7031							; added by Aaron Lanterman, 9/4/2020, to stop assembler from complaining...
     94  7031							; Basically, I'm telling it you have a 32K cartridge, but that doesn't
     95  7031							; seem to break the emulator (at least)
     96  7031		       00 00 80 00	      DC.B	$00,$00,$80,$00	;
     97  7035							;DC.B	  $00,$00,256->code,$00; 49..52 data length	 - 4 bytes
     98  7035		       00 00		      DC.B	$00,$00	; 53..54 cart type	 - 2 bytes
     99  7037							;    bit 0 - pokey at $4000
    100  7037							;    bit 1 - supergame bank switched
    101  7037							;    bit 2 - supergame ram at $4000
    102  7037							;    bit 3 - rom at $4000
    103  7037							;    bit 4 - bank 6 at $4000
    104  7037							;    bit 5 - supergame banked ram
    105  7037							;    bit 6 - pokey at $450
    106  7037							;    bit 7 - mirror ram at $4000
    107  7037							;    bit 8-15 - Special
    108  7037							;   0 = Normal cart
    109  7037		       01		      DC.B	1	; 55	controller 1 type  - 1 byte
    110  7038		       01		      DC.B	1	; 56	controller 2 type  - 1 byte
    111  7039							;    0 = None
    112  7039							;    1 = Joystick
    113  7039							;    2 = Light Gun
    114  7039		       00		      DC.B	0	; 57 0 = NTSC 1 = PA
    115  703a		       00		      DC.B	0	; 58	Save data peripheral - 1 byte (version 2)
    116  703b							;    0 = None / unknown (default)
    117  703b							;    1 = High Score Cart (HSC)
    118  703b							;    2 = SaveKey
    119  703f					      ORG	HEADER+63
    120  703f		       00		      DC.B	0	; 63	Expansion module
    121  7040							;    0 = No expansion module (default on all currently released games)
    122  7040							;    1 = Expansion module required
    123  7064					      ORG	HEADER+100	; 100..127 "ACTUAL CART DATA STARTS HERE" - 28 bytes
    124  7064		       41 43 54 55*	      DC.B	"ACTUAL CART DATA STARTS HERE"
    125  7080							; end of header code for the simulator added by Aaron Lanterman
    126  7080
    127  7080							; Aaron Lanterman added "code" at the start of the next line (1/30/2020)	 
    128  8000				   code       org	$8000	;Start of code
    129  8000
    130  8000				   START
    131  8000		       78		      sei		;Disable interrupts
    132  8001		       d8		      cld		;Clear decimal mode
    133  8002
    134  8002
    135  8002							;******** Atari recommended startup procedure
    136  8002
    137  8002		       a9 07		      lda	#$07
    138  8004		       85 01		      sta	INPTCTRL	;Lock into 7800 mode
    139  8006		       a9 7f		      lda	#$7F
    140  8008		       85 3c		      sta	CTRL	;Disable DMA
    141  800a		       a9 00		      lda	#$00
    142  800c		       85 38		      sta	OFFSET
    143  800e		       85 01		      sta	INPTCTRL
    144  8010		       a2 ff		      ldx	#$FF	;Reset stack pointer
    145  8012		       9a		      txs
    146  8013
    147  8013							;************** Clear zero page and hardware ******
    148  8013
    149  8013		       a2 40		      ldx	#$40
    150  8015		       a9 00		      lda	#$00
    151  8017				   crloop1
    152  8017		       95 00		      sta	$00,x	;Clear zero page
    153  8019		       9d 00 01 	      sta	$100,x	;Clear page 1
    154  801c		       e8		      inx
    155  801d		       d0 f8		      bne	crloop1
    156  801f
    157  801f							;************* Clear RAM **************************
    158  801f
    159  801f		       a0 00		      ldy	#$00	;Clear Ram
    160  8021		       a9 18		      lda	#$18	;Start at $1800
    161  8023		       85 81		      sta	$81
    162  8025		       a9 00		      lda	#$00
    163  8027		       85 80		      sta	$80
    164  8029				   crloop3
    165  8029		       a9 00		      lda	#$00
    166  802b		       91 80		      sta	($80),y	;Store data
    167  802d		       c8		      iny		;Next byte
    168  802e		       d0 f9		      bne	crloop3	;Branch if not done page
    169  8030		       e6 81		      inc	$81	;Next page
    170  8032		       a5 81		      lda	$81
    171  8034		       c9 20		      cmp	#$20	;End at $1FFF
    172  8036		       d0 f1		      bne	crloop3	;Branch if not
    173  8038
    174  8038		       a0 00		      ldy	#$00	;Clear Ram
    175  803a		       a9 22		      lda	#$22	;Start at $2200
    176  803c		       85 81		      sta	$81
    177  803e		       a9 00		      lda	#$00
    178  8040		       85 80		      sta	$80
    179  8042				   crloop4
    180  8042		       a9 00		      lda	#$00
    181  8044		       91 80		      sta	($80),y	;Store data
    182  8046		       c8		      iny		;Next byte
    183  8047		       d0 f9		      bne	crloop4	;Branch if not done page
    184  8049		       e6 81		      inc	$81	;Next page
    185  804b		       a5 81		      lda	$81
    186  804d		       c9 27		      cmp	#$27	;End at $27FF
    187  804f		       d0 f1		      bne	crloop4	;Branch if not
    188  8051
    189  8051		       a2 00		      ldx	#$00
    190  8053		       a9 00		      lda	#$00
    191  8055				   crloop5		;Clear 2100-213F
    192  8055		       9d 00 21 	      sta	$2100,x
    193  8058		       e8		      inx
    194  8059		       e0 40		      cpx	#$40
    195  805b		       d0 f8		      bne	crloop5
    196  805d
    197  805d							;************* Build DLL *******************
    198  805d
    199  805d							; 20 blank lines
    200  805d
    201  805d		       a2 00		      ldx	#$00
    202  805f		       a9 4f		      lda	#$4F	;16 lines
    203  8061		       9d 00 18 	      sta	$1800,x
    204  8064		       e8		      inx
    205  8065		       a9 21		      lda	#$21	;$2100 = blank DL
    206  8067		       9d 00 18 	      sta	$1800,x
    207  806a		       e8		      inx
    208  806b		       a9 00		      lda	#$00
    209  806d		       9d 00 18 	      sta	$1800,x
    210  8070		       e8		      inx
    211  8071		       a9 44		      lda	#$44	;4 lines
    212  8073		       9d 00 18 	      sta	$1800,x
    213  8076		       e8		      inx
    214  8077		       a9 21		      lda	#$21
    215  8079		       9d 00 18 	      sta	$1800,x
    216  807c		       e8		      inx
    217  807d		       a9 00		      lda	#$00
    218  807f		       9d 00 18 	      sta	$1800,x
    219  8082		       e8		      inx
    220  8083
    221  8083							; 192 mode lines divided into 12 regions
    222  8083
    223  8083		       a0 00		      ldy	#$00
    224  8085				   DLLloop2
    225  8085		       a9 4f		      lda	#$4F	;16 lines
    226  8087		       9d 00 18 	      sta	$1800,x
    227  808a		       e8		      inx
    228  808b		       b9 b7 81 	      lda	DLPOINTH,y
    229  808e		       9d 00 18 	      sta	$1800,x
    230  8091		       e8		      inx
    231  8092		       b9 c3 81 	      lda	DLPOINTL,y
    232  8095		       9d 00 18 	      sta	$1800,x
    233  8098		       e8		      inx
    234  8099		       c8		      iny
    235  809a		       c0 0d		      cpy	#$0D	;12 DLL entries
    236  809c		       d0 e7		      bne	DLLloop2
    237  809e
    238  809e
    239  809e							; 26 blank lines
    240  809e
    241  809e		       a9 4f		      lda	#$4F	;16 lines
    242  80a0		       9d 00 18 	      sta	$1800,x
    243  80a3		       e8		      inx
    244  80a4		       a9 21		      lda	#$21	;$2100 = blank DL
    245  80a6		       9d 00 18 	      sta	$1800,x
    246  80a9		       e8		      inx
    247  80aa		       a9 00		      lda	#$00
    248  80ac		       9d 00 18 	      sta	$1800,x
    249  80af		       e8		      inx
    250  80b0		       a9 4a		      lda	#$4A	;10 lines
    251  80b2		       9d 00 18 	      sta	$1800,x
    252  80b5		       e8		      inx
    253  80b6		       a9 21		      lda	#$21
    254  80b8		       9d 00 18 	      sta	$1800,x
    255  80bb		       e8		      inx
    256  80bc		       a9 00		      lda	#$00
    257  80be		       9d 00 18 	      sta	$1800,x
    258  80c1
    259  80c1
    260  80c1							;***************** Setup Maria Registers ****************
    261  80c1
    262  80c1		       a9 18		      lda	#$18	;DLL at $1800
    263  80c3		       85 2c		      sta	DPPH
    264  80c5		       a9 00		      lda	#$00
    265  80c7		       85 30		      sta	DPPL
    266  80c9		       a9 18		      lda	#$18	;Setup Palette 0
    267  80cb		       85 21		      sta	P0C1
    268  80cd		       a9 38		      lda	#$38
    269  80cf		       85 22		      sta	P0C2
    270  80d1		       a9 58		      lda	#$58
    271  80d3		       85 23		      sta	P0C3
    272  80d5		       a9 43		      lda	#$43	;Enable DMA
    273  80d7		       85 3c		      sta	CTRL
    274  80d9		       a9 00		      lda	#$00	;Setup ports to read mode
    275  80db		       8d 81 02 	      sta	CTLSWA
    276  80de		       8d 83 02 	      sta	CTLSWB
    277  80e1
    278  80e1		       a9 40		      lda	#$40	;Set initial X position of sprite
    279  80e3		       85 40		      sta	xpos
    280  80e5
    281  80e5				   mainloop
    282  80e5		       a5 28		      lda	MSTAT	;Wait for VBLANK
    283  80e7		       29 80		      and	#$80
    284  80e9		       f0 fa		      beq	mainloop
    285  80eb
    286  80eb		       ad 80 02 	      lda	SWCHA	;Read stick
    287  80ee		       29 80		      and	#$80	;Pushed Right?
    288  80f0		       d0 05		      bne	skip1
    289  80f2		       a6 40		      ldx	xpos	;Move sprite to right
    290  80f4		       e8		      inx
    291  80f5		       86 40		      stx	xpos
    292  80f7				   skip1
    293  80f7		       ad 80 02 	      lda	SWCHA	;Read stick
    294  80fa		       29 40		      and	#$40	;Pushed Left?
    295  80fc		       d0 05		      bne	skip2
    296  80fe		       a6 40		      ldx	xpos	;Move sprite to left
    297  8100		       ca		      dex
    298  8101		       86 40		      stx	xpos
    299  8103				   skip2
    300  8103		       ad 80 02 	      lda	SWCHA	;Read stick
    301  8106		       29 20		      and	#$20	;Pushed Down?
    302  8108		       d0 09		      bne	skip3
    303  810a		       a6 41		      ldx	ypos	;Move sprite down
    304  810c		       e0 b0		      cpx	#176
    305  810e		       f0 03		      beq	skip3	;Don't move if we are at the bottom
    306  8110		       e8		      inx
    307  8111		       86 41		      stx	ypos
    308  8113				   skip3
    309  8113		       ad 80 02 	      lda	SWCHA	;Read stick
    310  8116		       29 10		      and	#$10	;Pushed Up?
    311  8118		       d0 07		      bne	skip4
    312  811a		       a6 41		      ldx	ypos	;Move sprite up
    313  811c		       f0 03		      beq	skip4	;Don't move if we are at the top
    314  811e		       ca		      dex
    315  811f		       86 41		      stx	ypos
    316  8121				   skip4
    317  8121
    318  8121							;********************** reset DL ends ******************
    319  8121
    320  8121		       a2 0c		      ldx	#$0C
    321  8123		       a9 00		      lda	#$00
    322  8125				   dlclearloop
    323  8125		       ca		      dex
    324  8126		       95 45		      sta	dlend,x
    325  8128		       d0 fb		      bne	dlclearloop
    326  812a
    327  812a
    328  812a							;******************** build DL entries *********************
    329  812a
    330  812a		       a5 41		      lda	ypos	;Get Y position
    331  812c		       29 f0		      and	#$F0
    332  812e		       4a		      lsr		;Divide by 16
    333  812f		       4a		      lsr
    334  8130		       4a		      lsr
    335  8131		       4a		      lsr
    336  8132		       aa		      tax
    337  8133		       bd c3 81 	      lda	DLPOINTL,x	;Get pointer to DL that this sprite starts in
    338  8136		       85 43		      sta	dlpnt
    339  8138		       bd b7 81 	      lda	DLPOINTH,x
    340  813b		       85 44		      sta	dlpnt+1
    341  813d
    342  813d							;Create DL entry for upper part of sprite
    343  813d
    344  813d		       b4 45		      ldy	dlend,x	;Get the index to the end of this DL
    345  813f		       a9 00		      lda	#$00
    346  8141		       91 43		      sta	(dlpnt),y	;Low byte of data address
    347  8143		       c8		      iny
    348  8144		       a9 40		      lda	#$40	;Mode 320x1
    349  8146		       91 43		      sta	(dlpnt),y
    350  8148		       c8		      iny
    351  8149		       a5 41		      lda	ypos
    352  814b		       29 0f		      and	#$0F
    353  814d		       09 a0		      ora	#$a0
    354  814f		       91 43		      sta	(dlpnt),y
    355  8151		       c8		      iny
    356  8152		       a9 1f		      lda	#$1F	;Palette 0, 1 byte wide
    357  8154		       91 43		      sta	(dlpnt),y
    358  8156		       c8		      iny
    359  8157		       a5 40		      lda	xpos	;Horizontal position
    360  8159		       91 43		      sta	(dlpnt),y
    361  815b		       94 45		      sty	dlend,x
    362  815d
    363  815d		       a5 41		      lda	ypos
    364  815f		       29 0f		      and	#$0F	;See if sprite is entirely within this region
    365  8161		       f0 32		      beq	doneDL	;branch if it is
    366  8163
    367  8163							;Create DL entry for lower part of sprite 
    368  8163
    369  8163		       e8		      inx		;Next region
    370  8164		       bd c3 81 	      lda	DLPOINTL,x	;Get pointer to next DL
    371  8167		       85 43		      sta	dlpnt
    372  8169		       bd b7 81 	      lda	DLPOINTH,x
    373  816c		       85 44		      sta	dlpnt+1
    374  816e		       b4 45		      ldy	dlend,x	;Get the index to the end of this DL
    375  8170		       a9 00		      lda	#$00
    376  8172		       91 43		      sta	(dlpnt),y
    377  8174		       c8		      iny
    378  8175		       a9 40		      lda	#$40	;Mode 320x1
    379  8177		       91 43		      sta	(dlpnt),y
    380  8179		       c8		      iny
    381  817a		       a5 41		      lda	ypos
    382  817c		       29 0f		      and	#$0F
    383  817e		       49 0f		      eor	#$0F
    384  8180		       85 42		      sta	temp
    385  8182		       a9 a0		      lda	#$a0
    386  8184		       18		      clc
    387  8185		       e5 42		      sbc	temp
    388  8187		       91 43		      sta	(dlpnt),y
    389  8189		       c8		      iny
    390  818a		       a9 1f		      lda	#$1F	;Palette 0, 1 byte wide
    391  818c		       91 43		      sta	(dlpnt),y
    392  818e		       c8		      iny
    393  818f		       a5 40		      lda	xpos	;Horizontal position
    394  8191		       91 43		      sta	(dlpnt),y
    395  8193		       94 45		      sty	dlend,x
    396  8195				   doneDL
    397  8195
    398  8195							;************** add DL end entry on each DL *****************************
    399  8195
    400  8195		       a2 0c		      ldx	#$0C
    401  8197				   dlendloop
    402  8197		       ca		      dex
    403  8198		       bd c3 81 	      lda	DLPOINTL,x
    404  819b		       85 43		      sta	dlpnt
    405  819d		       bd b7 81 	      lda	DLPOINTH,x
    406  81a0		       85 44		      sta	dlpnt+1
    407  81a2		       b4 45		      ldy	dlend,x
    408  81a4		       c8		      iny
    409  81a5		       a9 00		      lda	#$00
    410  81a7		       91 43		      sta	(dlpnt),y
    411  81a9		       8a		      txa
    412  81aa		       d0 eb		      bne	dlendloop
    413  81ac
    414  81ac				   vbloop
    415  81ac		       a5 28		      lda	MSTAT	;Wait for VBLANK to end
    416  81ae		       29 80		      and	#$80
    417  81b0		       d0 fa		      bne	vbloop
    418  81b2
    419  81b2		       4c e5 80 	      jmp	mainloop	;Loop
    420  81b5
    421  81b5				   redraw
    422  81b5
    423  81b5
    424  81b5				   NMI
    425  81b5		       40		      RTI
    426  81b6
    427  81b6				   IRQ
    428  81b6		       40		      RTI
    429  81b7
    430  81b7
    431  81b7							;Pointers to the DLs
    432  81b7
    433  81b7				   DLPOINTH
    434  81b7		       22 22 22 22*	      .byte.b	$22,$22,$22,$22,$23,$23,$23,$23,$24,$24,$24,$24
    435  81c3				   DLPOINTL
    436  81c3		       00 40 80 c0*	      .byte.b	$00,$40,$80,$C0,$00,$40,$80,$C0,$00,$40,$80,$C0
    437  81cf
    438  81cf
    439  81cf
    440  81cf
    441  81cf							;************** Graphic Data *****************************
    442  a000					      org	$a000
    443  a000		       3c		      .byte.b	%00111100
    444  a100					      org	$a100
    445  a100		       3c		      .byte.b	%00111100
    446  a200					      org	$a200
    447  a200		       7e		      .byte.b	%01111110
    448  a300					      org	$a300
    449  a300		       7e		      .byte.b	%01111110
    450  a400					      org	$a400
    451  a400		       ff		      .byte.b	%11111111
    452  a500					      org	$a500
    453  a500		       ff		      .byte.b	%11111111
    454  a600					      org	$a600
    455  a600		       a5		      .byte.b	%10100101
    456  a700					      org	$a700
    457  a700		       a5		      .byte.b	%10100101
    458  a800					      org	$a800
    459  a800		       81		      .byte.b	%10000001
    460  a900					      org	$a900
    461  a900		       81		      .byte.b	%10000001
    462  aa00					      org	$aA00
    463  aa00		       a5		      .byte.b	%10100101
    464  ab00					      org	$aB00
    465  ab00		       a5		      .byte.b	%10100101
    466  ac00					      org	$aC00
    467  ac00		       42		      .byte.b	%01000010
    468  ad00					      org	$aD00
    469  ad00		       42		      .byte.b	%01000010
    470  ae00					      org	$aE00
    471  ae00		       3c		      .byte.b	%00111100
    472  af00					      org	$aF00
    473  af00		       3c		      .byte.b	%00111100
    474  af01
    475  af01
    476  af01							;************** Cart reset vector **************************
    477  af01
    478  fff8					      org	$fff8
    479  fff8		       ff		      .byte.b	$FF	;Region verification
    480  fff9		       87		      .byte.b	$87	;ROM start $4000
    481  fffa		       b5 81		      .word.w	#NMI
    482  fffc		       00 80		      .word.w	#START
    483  fffe		       b6 81		      .word.w	#IRQ
    484  10000
    485  10000
